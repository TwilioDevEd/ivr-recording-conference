.chapter(data-title='IVR Phone Tree')
  .step(data-file='config/routes.rb')
    :markdown
      ## About this application

      ![Extra Terrestrial Phone Home
      Service](http://howtodocs.s3.amazonaws.com/logo-et-phone2.png)

      This [Ruby on Rails](http://rubyonrails.org/) sample application is
      modeled after a typical call center experience, but with more [Reese's
      Pieces](https://en.wikipedia.org/wiki/Reese%27s_Pieces#ET:_The_Extra-
      Terrestrial).

      Stranded aliens can call a phone number and receive instructions on how
      to get out of earth safely, or call their home planet
      directly[.](http://bit.ly/asogi) In this tutorial, we'll show you the
      key bits of code that allow an agent to send a caller to voicemail, and
      later read transcripts and listen to voicemails.

      To run this sample app yourself, [download the code and follow the
      instructions on GitHub](https://github.com/TwilioDevEd/ivr-recording-rails).

      Let's get started! Click the right arrow above to move to the next step
      of the tutorial.

      ---

      **See Also:**
      * [ET IVR Part One: Phone Trees](https://www.twilio.com/docs/howto/walkthrough/ivr-phone-tree/ruby/rails#0)
      * [Getting Started with Ruby on Rails](http://guides.rubyonrails.org/getting_started.html)
      * [Getting started with the Twilio Ruby gem](//twilio-ruby.readthedocs.org/en/latest/index.html#getting-started)

  .step(data-file='app/controllers/twilio_controller.rb', data-highlight='55-82')
    :markdown
      ## Route the call to an agent

      When our caller chooses a planet we need to figure out where to route the
      call. Depending on her input we will route this call to an extension. In
      this case an extension will be used to look up an Agent, so any string
      can be used to define an extension. 

      Once we lookup the `Agent` we can `Dial` the agent's phone number and try
      and connect the call. Let's dive in a little bit more into how we lookup
      the Agent.

      ---

      **See Also:**
      * [TwiML response with the twilio-ruby library](https://www.twilio.com/docs/quickstart/ruby/twiml)
      * [TwiML Dial](https://www.twilio.com/docs/api/twiml/dial)
      
  .step(data-file='app/controllers/twilio_controller.rb', data-highlight='73')
    :markdown
      ## Looking up an Agent

      In this case the Agent model is very simple:

      ```
      create_table :agents do |t|
        t.string :extension
        t.string :phone_number

        t.timestamps
      end
      ```

      We have a handle or `extension` that we can use to lookup and Agent, and
      we have a `phone_number` that we will call.

      ---

      **See Also:**
      * [Looking up an ActiveRecord object](http://guides.rubyonrails.org/active_record_querying.html#retrieving-a-single-object)


  .step(data-file='app/controllers/twilio_controller.rb', data-highlight='76-78, 84-101')
    :markdown
      ## An agent screens the call

      By passing a `url` to the `Dial` > [`Number`](https://www.twilio.com/docs/api/twiml/number)
      TwiML tag, we are telling Twilio to make a POST request to the
      `/ivr/screen_call` URL _after_ the agent has picked up but _before_
      connecting the two parties. 

      Essentially we are telling Twilio to execute some TwiML that only the
      agent will hear. In this case the TwiML instructs the agent to press any
      number to accept the call. This is processed through the
      [Gather](https://www.twilio.com/docs/api/twiml/gather) callback.

      ---

      **See Also:**
      * [TwiML Say verb](https://www.twilio.com/docs/api/twiml/say)

  .step(data-file='app/controllers/twilio_controller.rb', data-highlight='103-114, 76-78')
    :markdown
      ## Connect the Caller to the Agent

      If the agent responds to the call screen by entering any digit the
      response will be processed by our `agent_screen_response` method which
      will `Say` a quick message, then continue with the original `Dial` command
      and connect the two parties. 

      If the agent instead does not respond, the Dial verb will end by making a
      POST request to its
      [`action`](https://www.twilio.com/docs/api/twiml/dial#attributes-action)
      url which we defined above.

      ---

      **See Also:**
      * [The Gather action attribute](https://www.twilio.com/docs/api/twiml/gather#attributes-action)

  .step(data-file='app/controllers/twilio_controller.rb', data-highlight='116-136')
    :markdown
      ## Send the Caller to Voicemail

      When Twilio makes a request to our voicemail controller, it will pass a
      [`DialCallStatus`](https://www.twilio.com/docs/api/twiml/dial#attributes-action-dial-call-status-values)
      which will tell us if the call was successful. If it was "completed" we
      hangup â€” otherwise we need to `Say` a quick prompt and then
      [`Record`](https://www.twilio.com/docs/api/twiml/record) a voicemail from
      the caller. 

      Since we didn't pass an action to `Record`, Twilio will request this same
      route when the recording completes. In that case we also want to hang up
      if a recording is present.

      ---

      **See Also:**
      * [Twilio Request
        parameters](https://www.twilio.com/docs/api/twiml/twilio_request
        #synchronous-request-parameters)
      * [The TwiML Hangup verb](https://www.twilio.com/docs/api/twiml/hangup)

  .step(data-file='app/controllers/twilio_controller.rb', data-highlight='126')
    :markdown
      ## Record the Caller

      When we tell Twilio to Record we have a few
      [options](https://www.twilio.com/docs/api/twiml/record#attributes) we can
      pass to the `Record` verb. 

      Here we instruct Record to stop the recording at 20 seconds, to
      [`transcribe`](https://www.twilio.com/docs/api/twiml/record#attributes-transcribe)
      the call, and where to send the transcription when it's complete.

      Notice we append some query parameters at the end of the transcribe
      callback. This is a convenient way to pass application variables along
      with the TwiML request parameters. By passing the `:agent_id` we now have
      a way to save a `Recording` on that `Agent` object.

      ---

      **See Also:**
      * [Twilio transcribeCallBack](https://www.twilio.com/docs/api/twiml/record#attributes-transcribe-callback)
      * [Rails query parameters in the controller](http://guides.rubyonrails.org/action_controller_overview.html#parameters)

  .step(data-file='app/controllers/recordings_controller.rb')
    :markdown
      ## View an Agent's Voicemails

      Once we look up the Agent, all we need to do is display all of her
      recordings. If you'd like to dig deeper into the recording object feel
      free to check it out on
      [GitHub](https://github.com/TwilioDevEd/ivr-recording-rails/blob/master/db/schema.rb).

      It is possible to look up recordings via the Twilio REST API, but since
      we have all of the data we need in the `transcribeCallBack` we can easily
      store it ourselves and save a roundtrip.

      ---

      **See Also:**
      * [Creating ActiveRecord associations](http://guides.rubyonrails.org/association_basics.html#the-has-many-association)
      * [Twilio REST API: Recordings](https://www.twilio.com/docs/api/rest/recording)
      * [Twilio REST API: Transcription Resource](https://www.twilio.com/docs/api/rest/transcription)


  .step
    :markdown
      ## Where to next?

      That's it! We've just implemented an IVR with real Agents, call
      screening and voicemail. If you're a Ruby developer working with Twilio,
      you might want to check out these other tutorials.

      [**Part 1 of this Tutorial: ET Phone Home Service - IVR Phone
      Trees**](//www.twilio.com/docs/howto/walkthrough/ivr-phone-
      tree/ruby/rails#0)

      Increase your rate of response by automating the workflows that are key
      to your business.

      [**Appointment
      Reminders**](https://www.twilio.com/docs/howto/walkthrough/appointment-
      reminders/ruby/rails)

      Send your customers a text message when they have an upcoming
      appointment - this tutorial shows you how to do it from a background
      job.

      ### Did this help?

      Thanks for checking out this tutorial! If you have any feedback to share
      with us, we'd love to hear it. Tweet
      [@twilio](http://twitter.com/twilio) to let us know what you think.








